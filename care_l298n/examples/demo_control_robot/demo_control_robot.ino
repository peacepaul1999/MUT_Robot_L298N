/**
 * @file demo_control_robot.ino
 * @brief ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå L298N ‡∏î‡πâ‡∏ß‡∏¢ ESP32 ‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Serial
 *
 * ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå DC ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 2 ‡∏ï‡∏±‡∏ß
 * ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå L298N ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏£‡πå‡∏î ESP32
 * ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô Serial Monitor ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà:
 *  - ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (forward)
 *  - ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á (backward)
 *  - ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ (left)
 *  - ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤ (right)
 *  - ‡∏´‡∏¢‡∏∏‡∏î (stop)
 *
 * ‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô:
 *  - IN1,255  ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PWM ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤ IN1 = 255
 *  - IN2,100  ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PWM ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤ IN2 = 100
 *
 * @note
 * - ‡πÉ‡∏ä‡πâ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ CARE_L298N ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
 * - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏£‡πå‡∏î ESP32, ESP8266 ‡πÅ‡∏•‡∏∞ AVR
 * - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß PWM ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0‚Äì255
 *
 * @author
 * ‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå
 * ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ (MUT)
 *
 * @date 20‚Äì21 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° 2025
 * @version test_1.1
 */

#include <Arduino.h>
#include <CARE_L298N.h>

// ===========================
// ‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤ (Pin Configuration)
// ===========================
#define IN1 GPIO_NUM_12
#define IN2 GPIO_NUM_14
#define IN3 GPIO_NUM_27
#define IN4 GPIO_NUM_26

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö 4 ‡∏Ç‡∏≤ (Full PWM Mode)
CARE_L298N motor(IN1, IN2, IN3, IN4);

// ===========================
// üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
// ===========================
void setup()
{
  Serial.begin(115200);
  Serial.println();
  Serial.println("=======================================");
  Serial.println("  ESP32 Robot Control via Serial v1.1  ");
  Serial.println("=======================================");
  Serial.println("Available commands:");
  Serial.println("  f / forward");
  Serial.println("  b / backward");
  Serial.println("  l / left");
  Serial.println("  r / right");
  Serial.println("  s / stop");
  Serial.println("  INx,Speed (e.g. IN1,200)");
  Serial.println("---------------------------------------");

  motor.stop(); // ‡∏´‡∏¢‡∏∏‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
  Serial.println("Setup completed.\n");
}

// ===========================
// üîÅ ‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
// ===========================
void loop()
{
  if (Serial.available())
  {
    static char command[32];
    size_t len = Serial.readBytesUntil('\n', command, sizeof(command) - 1);
    command[len] = '\0'; // ‡∏õ‡∏¥‡∏î‡∏™‡∏ï‡∏£‡∏¥‡∏á

    // ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á (trim)
    char *start = command;
    while (isspace(*start))
      start++;
    char *end = start + strlen(start) - 1;
    while (end > start && isspace(*end))
      end--;
    *(end + 1) = '\0';

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ ',' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    char *comma = strchr(start, ',');
    if (comma)
    {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô IN1,200
      *comma = '\0';
      char *pin_name = start;
      char *speed_str = comma + 1;

      uint8_t speed = constrain(atoi(speed_str), 0, 255);
      gpio_num_t target_pin = GPIO_NUM_NC;

      if (!strcasecmp(pin_name, "IN1"))
        target_pin = IN1;
      else if (!strcasecmp(pin_name, "IN2"))
        target_pin = IN2;
      else if (!strcasecmp(pin_name, "IN3"))
        target_pin = IN3;
      else if (!strcasecmp(pin_name, "IN4"))
        target_pin = IN4;
      else
      {
        Serial.printf("‚ö†Ô∏è Unknown pin: %s\n", pin_name);
        return;
      }

      motor.motor_control(target_pin, speed);
      Serial.printf("‚úÖ Set %s speed = %d\n", pin_name, speed);
    }
    else
    {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÄ‡∏ä‡πà‡∏ô forward, backward
      if (!strcasecmp(start, "f") || !strcasecmp(start, "forward"))
      {
        motor.forward(255);
        Serial.println("üöó Moving forward");
      }
      else if (!strcasecmp(start, "b") || !strcasecmp(start, "backward"))
      {
        motor.backward(255);
        Serial.println("üîô Moving backward");
      }
      else if (!strcasecmp(start, "l") || !strcasecmp(start, "left"))
      {
        motor.turn_left(200);
        Serial.println("‚Ü©Ô∏è Turning left");
      }
      else if (!strcasecmp(start, "r") || !strcasecmp(start, "right"))
      {
        motor.turn_right(200);
        Serial.println("‚Ü™Ô∏è Turning right");
      }
      else if (!strcasecmp(start, "s") || !strcasecmp(start, "stop"))
      {
        motor.stop();
        Serial.println("üõë Stop");
      }
      else
      {
        Serial.printf("‚ö†Ô∏è Unknown command: %s\n", start);
      }
    }
  }
}
